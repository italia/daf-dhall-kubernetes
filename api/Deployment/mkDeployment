-- Prelude
let Prelude = https://raw.githubusercontent.com/dhall-lang/Prelude/v3.0.0/package.dhall

let map = Prelude.`List`.map

let kv = Prelude.JSON.keyText

let Types = ./RawTypes

let default = ./RawDefaults

let mkContainer = ./mkContainer

let mkDeployment : ./Deployment → Types.Deployment
  =   λ(deployment : ./Deployment)  →
        let selector = Some [ kv "app" deployment.name, kv "logging" "daf_app" ]

        let spec =
          default.spec
          { selector =
              default.selector ⫽ { matchLabels = selector }
          , template =
                default.template
                { metadata =
                      default.meta { name = deployment.name }
                    ⫽ { labels = selector }
                }
              ⫽ { spec =
                    Some
                    (   default.podSpec
                        { containers =
                            map
                            ./Container
                            Types.Container
                            mkContainer
                            deployment.containers
                        }
                      ⫽ { hostAliases = deployment.hostAliases
                      , volumes = ./mkVolumes deployment
                      , imagePullSecrets = Some [ { name = Some "regsecret"}] }
                    )
                }
          }
          ⫽ { replicas =
                Some deployment.replicas
            , revisionHistoryLimit =
                Some deployment.revisionHistoryLimit
            , strategy =
                Some
                { type =
                    Some "RollingUpdate"
                , rollingUpdate =
                    Some
                    { maxSurge =
                        Some (default.Int deployment.maxSurge)
                    , maxUnavailable =
                        Some (default.Int deployment.maxUnavailable)
                    }
                }
            }

            in    default.deployment
                  { metadata = default.meta { name = deployment.name } }
                ⫽ { spec = Some spec }

in  mkDeployment
